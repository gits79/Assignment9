# 정렬 알고리즘 별 실제 실행시간 비교


## 실행시간 측정

![img](result.png)
#



## 정렬되지 않은 랜덤한 숫자를 정렬한 경우

![img](random.png)

퀵 >> 힙 >> 쉘 >> 삽입 >> 선택 >> 버블 순으로 실행시간이 짧았습니다.

#
</br>

## 역순으로 정렬된 배열을 정렬한 경우

![img](reverse.png)

퀵 >> 힙 >> 쉘 >> 선택 >> 삽입 >> 버블 순으로 실행시간이 짧았습니다.

#

</br>

## 이미 정렬된 배열을 정렬한 경우

![img](sorted.png)

퀵 >> 삽입 >> 힙 >> 쉘 >> 선택 >> 버블 순으로 실행시간이 짤았습니다.

#
</br>

## 느낀점
</br>

버블 정렬의 시간 복잡도 :  O(n^2)\
선택 정렬의 시간 복잡도 :  O(n^2)\
삽입 정렬의 시간 복잡도 :  최선의 경우 O(n) , 평균 O(n^2)\
쉘 정렬의 시간 복잡도 :  O(n^1.25)\
힙 정렬의 시간 복잡도 :  O(nlogn)\
퀵 정렬의 시간 복잡도 : 평균 O(nlogn) , 최악의 경우 : O(n^2)

</br>

대체적으로 주어진 시간 복잡도 그대로 쉘,힙,퀵 정렬의 경우  빠른 시간을 보여주었으며 삽입,선택,버블 정렬의 경우 상대적으로 느린 시간이 걸렸습니다.\
그러나 삽입 정렬의 경우 최선의 경우에는 O(n)의 시간 복잡도로 매우 빠른 실행시간을 보여주는데 정렬된 배열을 정렬하는 경우 삽입정렬의 실행시간이 상대적으로 빠르게 나와\
최선의 경우 결과가 일치하는 것을 직접 측정을 통해서 확인할 수 있었습니다.